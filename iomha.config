# Name of the experiment. Used as the name of the daemon.
# If you want to run multiple experiments simultaneously,
# each must have a different name. Also used in naming wains.
experimentName="Mnist1"

# The working directory, which contains all of the data for
# this experiment.
workingDir="/home/eamybut/alife/mnist1"

# The size of the memory cache used to hold wains.
cacheSize=10000000000

# Number of microseconds to sleep after each agent gets its turn
# at the CPU.
sleepTimeBetweenTasks=0

# Location of the images to be used in this experiment.
imageDir="/home/eamybut/mnist/testDataWithAnomalies"

# Image width. All images must have the same dimensions.
imageWidth=28

# Image height. All images must have the same dimensions.
imageHeight=28

# Range of pixel values to use when generating initial model genes
# for the initial population.
initialImageRange=(0,10)

# Wains will be killed when they reach this age
maxAge=1000

# Chances that a wain will encounter (in order)
# - two images (ignore?)
# - an image and a wain (classify?)
# - a wain and an image (flirt?) 
# - two wains (flirt)
frequencies=[5 % 100, 85 % 100, 5 % 100, 5 % 100]

#####
# Extra information
#####

# Show the decider models as each decision is made.
showDeciderModels=False

# Show all the predictions made by the decider.
showPredictions=False

# Take an FMRI of the wain's brain after each turn.
genFMRIs=False

#####
# Metabolism
#####

# To ensure that smaller agents don't have an excessive advantage
# over larger agents, part of the metabolic cost is fixed.
# Compare with maxSizeBasedMetabolismDeltaE.
# This is normally an energy LOSS, so it should be negative.
baseMetabDeltaE=-0.049

# To ensure that agents use resources efficiently, part of their
# metabolic cost is based on their size.
# This is normally an energy LOSS, so it should be negative.
# To set this value, create the initial population and note the
# "avg. size" value reported in the log summary.
# Multiply the "avg. size" by -8e-14 to get a good value for
# energyCostPerByte. (You can round it off, the exact value is
# not critical.)
# This will result in avg. metabolism Δe ≅ -0.05, at least for
# the first few rounds.
energyCostPerByte=-9e-9

# A wain rearing a child pays a fraction of the metabolic cost
# that the child would pay if it were full-grown. It's only a
# fraction because children do not require as much processor 
# time.
# You probably won't need to alter this field.
childCostFactor=0.1

# Each time an agent has a CPU turn, its energy changes by an
# amount based on the number of classifier models it uses 
# regularly (classifier SQ).
# Otherwise, agents might only use a few classifier models. 
# (Why?)
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
csqDeltaE=0.002

# Each time an agent has a CPU turn, its energy changes by an
# amount based on the number of decider models it uses 
# regularly (decider SQ).
# Otherwise, agents might only use a few decider models. 
# in order to maximise the chance that they will agree with
# other agents and get the reward.
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
dsqDeltaE=0.0005

# Each time an agent has a CPU turn, its energy changes by an
# amount based on the quality of its decider (DQ).
# Otherwise, agents might only use a few actions
# in order to maximise the chance that they will agree with
# other agents and get the reward.
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
dqDeltaE=0.002

#####
# Reproduction
#####

# Every time an agent flirts, its energy changes by a fixed
# amount.
# This is normally an energy LOSS, so it should be negative.
# You probably won't need to alter this field.
flirtingDeltaE=-0.001

#####
# Co-operation and agreement
#####

# When an agent initiates co-operation (trading classifications),
# its energy changes by a fixed amount.
# This is normally an energy GAIN, so it should be positive.
# (Or you could make it an energy LOSS to encourage wains to be
# slective in who they co-operate with.)
# You probably won't need to alter this field.
cooperationDeltaE=0.001

# When two agents co-operate, and agree on a classification,
# their energy changes by this amount, multiplied by their DQ.
# This is in addition to the energy change based on novelty
# and the minimum agreement energy change.
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
dqBasedAgreementDeltaE=0.0005

# When two agents co-operate, and agree on a classification,
# their energy changes by this amount, multiplied by the
# novelty of the image.
# This is in addition to the energy change based on DQ and the
# minimum agreement energy change.
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
noveltyBasedAgreementDeltaE=0

# When two agents co-operate, and agree on a classification,
# their energy changes by this amount.
# This is in addition to the energy change based on DQ and the
# energy change based on novelty.
# This is normally an energy GAIN, so it should be positive.
# You probably won't need to alter this field.
minAgreementDeltaE=0

# When two agents co-operate, and disagree on a classification,
# the wain to whom the object is more novel can learn from
# the other agent. The flag below enables this feature.
adultAdultTeaching=False

#####
# Population size control
#####

# Size of the initial population
initialPopSize=5

# Ideal size for the population, expressed as a fraction of
# initialPopSize.
# Typically it will be larger than 1, to allow the population
# to "learn" to mate before it faces a serious survival
# challenge.
# You probably won't need to alter this field.
idealPopSize=3

# The daemon will stop if the population falls outside this
# range, which is expressed as a fraction of idealPopSize.
# This gives you a chance to analyse the problem and
# perhaps adjust your configuration.
# You probably won't need to alter this field.
popAllowedRange=(0.3,1.5)

#####
# Configuring the initial gene pool
#####

# Constrains the amount of energy that wains in the initial
# population give to their children at birth.
# You probably won't need to alter this field.
devotionRange=(0.0,0.3)

# Constrains the age at which wains in the initial population
# mature and leave their parents.
# You probably won't need to alter this field.
maturityRange=(1,100)

# Constrains the model outcomes for wains in the initial
# population.
outcomeRange=(0,0.1)

# The classifier portion of a wain's brain is a Self-Organising
# Map (SOM). This SOM uses a hexagonal grid with hexagonal tiles.
# The setting below controls the maximum length of one side of
# the grid, for the /initial/ population. The processing time
# required is proportional to the square of this value.
classifierSizeRange=(2,30)

# The range of values allowed for r0 (the learning rate applied
# to the BMU at time 0) in the learning function for the
# classifier in the initial population.
# You probably won't need to alter this field.
classifierR0Range=(0.8,1)

# The range of values allowed for d, the decay rate in the
# learning function for the classifier in the initial population.
# You probably won't need to alter this field.
classifierDecayRange=(0,0.2)

# The decider portion of a wain's brain is also a SOM, using a
# hexagonal grid with hexagonal tiles. The setting below controls
# the maximum length of one side of the grid, for the /initial/
# population. The processing time required is proportional to
# the square of this value.
# You probably won't need to alter this field.
deciderSizeRange=(2,200)

# The range of values allowed for r0 (the learning rate applied
# to the BMU at time 0) in the learning function for the
# decider in the initial population.
# You probably won't need to alter this field.
deciderR0Range=(0.8,1)

# The range of values allowed for d, the decay rate in the
# learning function for the decider in the initial population.
# You probably won't need to alter this field.
deciderDecayRange=(0,0.2)

#####
# Health checks
#####

# Each item in this list is a constraint on a particular statistic 
# to be satisfied beginning at a particular time. At the end of
# each round, the constraints are checked. If any of the 
# constraints fail, the daemon halts.
# Constraints can either be "In" a range, "GE" (greater than or 
# equal to) a value, or "LE" (less than or equal to) a value.
# You probably won't need to alter this field.
checkpoints=[Check 0 "avg. classifier num models" (GE 3),
             Check 0 "avg. decider num models" (GE 20),
             Check 0 "avg. co-operated" (GE 0.25),
             Check 0 "avg. maturity" (GE 20),
             Check 50 "avg. age" (GE 25),
             Check 500 "avg. classifier SQ" (GE 2.5),
             Check 1000 "avg. classifier SQ" (GE 3),
             Check 2000 "avg. classifier SQ" (GE 4),
             Check 3000 "avg. classifier SQ" (GE 5),
             Check 500 "avg. decider SQ" (GE 8),
             Check 500 "avg. DQ" (GE 4),
             Check 3000 "avg. DQ" (GE 6),
             Check 5000 "avg. DQ" (GE 8)]
